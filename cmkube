# Deploy a new Pod
kubectl run my-pod --image=nginx --namespace=my-namespace

# Expose the Pod as a Service
kubectl expose pod my-pod --port=80 --namespace=my-namespace

#Use the following command to create a namespace named web:
kubectl create ns web

#Use the following command to create a deployment named webapp:
kubectl run webapp --image=linuxacademycontent/podofminerva:latest --port=80 --replicas=3 -n web

kubectl config set-context --current --namespace=gg-name

https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#

https://kubernetes.io/docs/reference/kubectl/quick-reference/


#  NETWORKING
iptables -L -t nat

#Use the following command to create a temporary pod with a shell to its container:
kubectl run busybox --image=busybox --rm -it --restart=Never -- sh

#Use the following command (from the containerâ€™s shell) to send a request to the web pod:
wget -O- &lt;pod_ip_address>:80

#Use the following command to create the YAML for the service named web-service:
kubectl expose deployment/webapp --port=80 --target-port=80 --type=NodePort -n web --dry-run -o yaml > web-service.yaml


#### Patching
# Partially update a node
kubectl patch node k8s-node-1 -p '{"spec":{"unschedulable":true}}'

# Update a container's image; spec.containers[*].name is required because it's a merge key
kubectl patch pod valid-pod -p '{"spec":{"containers":[{"name":"kubernetes-serve-hostname","image":"new image"}]}}'

# Update a container's image using a json patch with positional arrays
kubectl patch pod valid-pod --type='json' -p='[{"op": "replace", "path": "/spec/containers/0/image", "value":"new image"}]'

# Disable a deployment livenessProbe using a json patch with positional arrays
kubectl patch deployment valid-deployment  --type json   -p='[{"op": "remove", "path": "/spec/template/spec/containers/0/livenessProbe"}]'

# Add a new element to a positional array
kubectl patch sa default --type='json' -p='[{"op": "add", "path": "/secrets/1", "value": {"name": "whatever" } }]'

# Update a deployment's replica count by patching its scale subresource
kubectl patch deployment nginx-deployment --subresource='scale' --type='merge' -p '{"spec":{"replicas":2}}'
